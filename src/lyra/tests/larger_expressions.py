# INITIAL: inp -> [-inf, inf], v -> [-inf, inf], v1 -> [-inf, inf], v2 -> [-inf, inf], d1 -> {([-inf, inf], [-inf, inf])}, d2 -> {([-inf, inf], [-inf, inf])}, d1 -> {([-inf, inf], True)}, d2 -> {([-inf, inf], True)}, {}
inp: int = int(input())
# STATE: inp -> [-inf, inf], v -> [-inf, inf], v1 -> [-inf, inf], v2 -> [-inf, inf], d1 -> {([-inf, inf], [-inf, inf])}, d2 -> {([-inf, inf], [-inf, inf])}, d1 -> {([-inf, inf], True)}, d2 -> {([-inf, inf], True)}, {}
if inp >= 5 and inp <= 8:
    # STATE: inp -> [5, 8], v -> [-inf, inf], v1 -> [-inf, inf], v2 -> [-inf, inf], d1 -> {([-inf, inf], [-inf, inf])}, d2 -> {([-inf, inf], [-inf, inf])}, d1 -> {([-inf, inf], True)}, d2 -> {([-inf, inf], True)}, {}
    d1: Dict[int, int] = {2:2, 5:10, 3:8}
    # STATE: inp -> [5, 8], v -> [-inf, inf], v1 -> [-inf, inf], v2 -> [-inf, inf], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10])}, d2 -> {([-inf, inf], [-inf, inf])}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, inf], True)}, d2 -> {([-inf, inf], True)}, {}
    d2: Dict[int, int] = {}
    # STATE: inp -> [5, 8], v -> [-inf, inf], v1 -> [-inf, inf], v2 -> [-inf, inf], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10])}, d2 -> {}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, inf], True)}, d2 -> {([-inf, inf], True)}, {}
    v1: int = 4 + 5
    # STATE: inp -> [5, 8], v -> [-inf, inf], v1 -> [9, 9], v2 -> [-inf, inf], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10])}, d2 -> {}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, inf], True)}, d2 -> {([-inf, inf], True)}, {}
    v2: int = d1[3] * 2 - d1[5] # 16 - 10
    # STATE: inp -> [5, 8], v -> [-inf, inf], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10])}, d2 -> {}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, inf], True)}, d2 -> {([-inf, inf], True)}, {}
    d1[v1]: int = v2 * d1[2]    # 6 * 2
    # STATE: inp -> [5, 8], v -> [-inf, inf], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {}
    if d1[v1] > (inp + 5):
        # STATE: inp -> [5, 6], v -> [-inf, inf], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {}
        v1: int = v1
        # STATE: inp -> [5, 6], v -> [-inf, inf], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {}
        for v in d1.values():
            # STATE: inp -> [5, 6], v -> [2, 12], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {([-1, -1], [7, 12]), ([5, 6], [2, inf])}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {(d1, None, v)}
            v1: int = v1
            # STATE: inp -> [5, 6], v -> [2, 12], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {([-1, -1], [7, 12]), ([5, 6], [2, inf])}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {(d1, None, v)}
            if v <= v2:
                # STATE: inp -> [5, 6], v -> [2, 6], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {([-1, -1], [7, 12]), ([5, 6], [2, inf])}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {(d1, None, v)}
                if inp in d2.keys():
                    # STATE: inp -> [5, 6], v -> [2, 6], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {([-1, -1], [7, 12]), ([5, 6], [2, inf])}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {(d1, None, v), (d2, inp, None)}
                    if d2[inp] <= 100:
                        # STATE: inp -> [5, 6], v -> [2, 6], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {([-1, -1], [7, 12]), ([5, 6], [2, 100])}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {(d1, None, v), (d2, inp, None)}
                        d2[inp]: int = d2[inp] + v      # weak
                        # STATE: inp -> [5, 6], v -> [2, 6], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {([-1, -1], [7, 12]), ([5, 6], [4, 106])}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {(d1, None, v), (d2, inp, None)}
                    # STATE: inp -> [5, 6], v -> [2, 6], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {([-1, -1], [7, 12]), ([5, 6], [2, 106])}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {(d1, None, v), (d2, inp, None)}
                else:
                    # STATE: inp -> [5, 6], v -> [2, 6], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {(d1, None, v)}
                    d2[inp]: int = v
                    # STATE: inp -> [5, 6], v -> [2, 6], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {([5, 6], [2, 6])}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {(d1, None, v)}
                # STATE: inp -> [5, 6], v -> [2, 6], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {([-1, -1], [7, 12]), ([5, 6], [2, 106])}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {(d1, None, v)}
            else:
                # STATE: inp -> [5, 6], v -> [7, 12], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {([-1, -1], [7, 12]), ([5, 6], [2, inf])}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {(d1, None, v)}
                d2[-1]: int = v
                # STATE: inp -> [5, 6], v -> [7, 12], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {([-1, -1], [7, 12]), ([5, 6], [2, inf])}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, -2], True), ([0, inf], True)}, {(d1, None, v)}
            # STATE: inp -> [5, 6], v -> [2, 12], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {([-1, -1], [7, 12]), ([5, 6], [2, inf])}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {(d1, None, v)}
        # STATE: inp -> [5, 6], v -> [-inf, inf], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {([-1, -1], [7, 12]), ([5, 6], [2, inf])}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {}
    # STATE: inp -> [5, 8], v -> [-inf, inf], v1 -> [9, 9], v2 -> [6, 6], d1 -> {([2, 2], [2, 2]), ([3, 3], [8, 8]), ([5, 5], [10, 10]), ([9, 9], [12, 12])}, d2 -> {([-1, -1], [7, 12]), ([5, 6], [2, inf])}, d1 -> {([-inf, 1], True), ([4, 4], True), ([6, 8], True), ([10, inf], True)}, d2 -> {([-inf, inf], True)}, {}
# FINAL: inp -> [-inf, inf], v -> [-inf, inf], v1 -> [-inf, inf], v2 -> [-inf, inf], d1 -> {([-inf, inf], [-inf, inf])}, d2 -> {([-inf, inf], [-inf, inf])}, d1 -> {([-inf, inf], True)}, d2 -> {([-inf, inf], True)}, {}